{"version":3,"sources":["hooks/useTimer.ts","views/Lottery/helpers/CountdownHelpers.ts","views/Lottery/components/LotteryProgress.tsx","views/Lottery/components/Hero.tsx","views/Lottery/components/Divider.tsx","views/Lottery/Lottery.tsx","utils/lotteryUtils.ts","hooks/useGetLotteryHasDrawn.ts","utils/getTimePeriods.ts"],"names":["useCurrentTime","useState","Date","getTime","currentMillis","setCurrentMillis","useEffect","timerID","setInterval","prevMillis","clearInterval","lotteryDrawHoursUtc","getNextLotteryDrawTime","millisTimeOfNextDraw","date","currentHour","getUTCHours","nextLotteryHour","getClosestLotteryHour","tomorrow","nextDay","getUTCDate","setUTCDate","setUTCHours","hoursAndMinutesString","hours","minutes","parseInt","getTicketSaleTime","msUntilNextTicketSale","getNextTicketSaleTime","getTimePeriods","getLotteryDrawStep","ProgressWrapper","styled","div","TopTextWrapper","BottomTextWrapper","StyledPrimaryText","Text","LotteryProgress","TranslateString","useI18n","lotteryHasDrawn","useGetLotteryHasDrawn","timeUntilTicketSale","timeUntilLotteryDraw","msUntilLotteryDraw","getLotteryDrawTime","primaryStep","secondaryStep","showProgressBunny","fontSize","bold","color","Title","Heading","attrs","as","size","theme","colors","secondary","Blurb","StyledHero","StyledContainer","Container","mediaQueries","sm","LeftWrapper","lg","RightWrapper","Hero","textSubtle","Wrapper","Lottery","lotteryContract","useLottery","account","useWeb3React","activeIndex","setActiveIndex","setHistoryData","setHistoryError","setCurrentLotteryNumber","setMostRecentLotteryNumber","fetch","then","response","json","data","catch","a","getLotteryIssueIndex","index","previousLotteryNumber","getInitialLotteryIndex","Page","onItemClick","scale","variant","Divider","multiCall","abi","calls","web3","getWeb3NoAccount","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","res","length","i","newCalls","slice","calldata","map","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","concat","decodeFunctionResult","multiBuy","price","numbersList","BigNumber","times","pow","toString","send","from","on","tx","transactionHash","console","error","getTickets","ticketsContract","customLotteryNum","issueIndex","getTicketsAmount","calls1","Array","apply","options","address","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","eq","push","calls3","tickets","getLotteryStatus","balanceOf","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","rewards","finanltokenIds","r","getTotalClaim","drawed","calls4","claim","reduce","p","c","sum","getTotalRewards","getMax","maxNumber","getMatchingRewardLength","matchNumber","historyAmount","amount","LOTTERY_TICKET_PRICE","getWinningNumbers","numbers","historyNumbers","winningNumbers","setLotteryHasDrawn","state","fetchLotteryStatus","HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","seconds","delta","timeLeft","years","months","days","Math","floor"],"mappings":"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","file":"static/js/9.6d302d4e.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\nexport const useCurrentTime = () => {\r\n  const [currentMillis, setCurrentMillis] = useState(new Date().getTime())\r\n\r\n  useEffect(() => {\r\n    const tick = () => {\r\n      setCurrentMillis((prevMillis) => prevMillis + 1000)\r\n    }\r\n\r\n    const timerID = setInterval(() => tick(), 1000)\r\n\r\n    return () => clearInterval(timerID)\r\n  }, [])\r\n\r\n  return currentMillis\r\n}\r\n\r\nexport default useCurrentTime\r\n","import getTimePeriods from 'utils/getTimePeriods'\r\n\r\n// lottery draws UTC: 02:00 (10:00 SGT), 14:00 (22:00 SGT)\r\nconst lotteryDrawHoursUtc = [2, 14]\r\n\r\nconst getClosestLotteryHour = (currentHour) => {\r\n  switch (true) {\r\n    case currentHour < lotteryDrawHoursUtc[0] || currentHour >= lotteryDrawHoursUtc[1]:\r\n      return lotteryDrawHoursUtc[0]\r\n    case currentHour < lotteryDrawHoursUtc[1]:\r\n      return lotteryDrawHoursUtc[1]\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nconst getNextLotteryDrawTime = (currentMillis) => {\r\n  const date = new Date(currentMillis)\r\n  const currentHour = date.getUTCHours()\r\n  const nextLotteryHour = getClosestLotteryHour(currentHour)\r\n  // next lottery is tomorrow if the next lottery is at 2am UTC...\r\n  // ...and current time is between 02:00am & 23:59pm UTC\r\n  const nextLotteryIsTomorrow = nextLotteryHour === 2 && currentHour >= 2 && currentHour <= 23\r\n  let millisTimeOfNextDraw\r\n\r\n  if (nextLotteryIsTomorrow) {\r\n    const tomorrow = new Date(currentMillis)\r\n    const nextDay = tomorrow.getUTCDate() + 1\r\n    tomorrow.setUTCDate(nextDay)\r\n    millisTimeOfNextDraw = tomorrow.setUTCHours(nextLotteryHour, 0, 0, 0)\r\n  } else {\r\n    millisTimeOfNextDraw = date.setUTCHours(nextLotteryHour, 0, 0, 0)\r\n  }\r\n\r\n  return millisTimeOfNextDraw\r\n}\r\n\r\n// @ts-ignore\r\nconst getNextTicketSaleTime = (currentMillis) => (parseInt(currentMillis / 3600000) + 1) * 3600000\r\nconst hoursAndMinutesString = (hours, minutes) => `${parseInt(hours)}h, ${parseInt(minutes)}m`\r\n\r\nexport const getTicketSaleTime = (currentMillis): string => {\r\n  const nextTicketSaleTime = getNextTicketSaleTime(currentMillis)\r\n  const msUntilNextTicketSale = nextTicketSaleTime - currentMillis\r\n  const { minutes } = getTimePeriods(msUntilNextTicketSale / 1000)\r\n  const { hours } = getTimePeriods(msUntilNextTicketSale / 1000)\r\n  return hoursAndMinutesString(hours, minutes)\r\n}\r\n\r\nexport const getLotteryDrawTime = (currentMillis): string => {\r\n  const nextLotteryDrawTime = getNextLotteryDrawTime(currentMillis)\r\n  const msUntilLotteryDraw = nextLotteryDrawTime - currentMillis\r\n  const { minutes } = getTimePeriods(msUntilLotteryDraw / 1000)\r\n  const { hours } = getTimePeriods(msUntilLotteryDraw / 1000)\r\n  return hoursAndMinutesString(hours, minutes)\r\n}\r\n\r\nexport const getTicketSaleStep = () => (1 / 12) * 100\r\n\r\nexport const getLotteryDrawStep = (currentMillis) => {\r\n  const msBetweenLotteries = 43200000\r\n  const endTime = getNextLotteryDrawTime(currentMillis)\r\n  const msUntilLotteryDraw = endTime - currentMillis\r\n  const percentageRemaining = (msUntilLotteryDraw / msBetweenLotteries) * 100\r\n  return 100 - percentageRemaining\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Progress } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\r\nimport { useCurrentTime } from 'hooks/useTimer'\r\nimport {\r\n  getLotteryDrawTime,\r\n  getLotteryDrawStep,\r\n  getTicketSaleTime,\r\n  getTicketSaleStep,\r\n} from '../helpers/CountdownHelpers'\r\n\r\nconst ProgressWrapper = styled.div`\r\n  display: block;\r\n  width: 100%;\r\n`\r\n\r\nconst TopTextWrapper = styled.div`\r\n  margin-top: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n`\r\n\r\nconst BottomTextWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledPrimaryText = styled(Text)`\r\n  margin-right: 16px;\r\n`\r\nconst LotteryProgress = () => {\r\n  const TranslateString = useI18n()\r\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\r\n  const currentMillis = useCurrentTime()\r\n  const timeUntilTicketSale = getTicketSaleTime(currentMillis)\r\n  const timeUntilLotteryDraw = getLotteryDrawTime(currentMillis)\r\n\r\n  return (\r\n    <ProgressWrapper>\r\n      <Progress primaryStep={getLotteryDrawStep(currentMillis)} secondaryStep={getTicketSaleStep()} showProgressBunny />\r\n      <TopTextWrapper>\r\n        <StyledPrimaryText fontSize=\"20px\" bold color=\"contrast\">\r\n          {lotteryHasDrawn ? timeUntilTicketSale : timeUntilLotteryDraw}\r\n        </StyledPrimaryText>\r\n        <Text fontSize=\"20px\" bold color=\"invertedContrast\">\r\n          {lotteryHasDrawn ? TranslateString(0, 'Until ticket sale') : TranslateString(0, 'Until lottery draw')}\r\n        </Text>\r\n      </TopTextWrapper>\r\n      {lotteryHasDrawn && (\r\n        <BottomTextWrapper>\r\n          <Text color=\"invertedContrast\">\r\n            {timeUntilLotteryDraw} {TranslateString(0, 'Until lottery draw')}\r\n          </Text>\r\n        </BottomTextWrapper>\r\n      )}\r\n    </ProgressWrapper>\r\n  )\r\n}\r\n\r\nexport default LotteryProgress\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Container from 'components/layout/Container'\r\nimport LotteryProgress from './LotteryProgress'\r\n\r\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\r\n  color: ${({ theme }) => theme.colors.secondary};\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst Blurb = styled(Text)`\r\n  color: #ffffff;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n`\r\n\r\nconst StyledHero = styled.div`\r\n  background-image: linear-gradient(180deg, #53dee9 0%, #1fc7d4 100%);\r\n  padding-bottom: 40px;\r\n  padding-top: 40px;\r\n`\r\n\r\nconst StyledContainer = styled(Container)`\r\n  display: flex;\r\n\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n  }\r\n`\r\n\r\nconst LeftWrapper = styled.div`\r\n  flex: 1;\r\n  padding-right: 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst RightWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex: 1;\r\n  padding-left: 0;\r\n  margin-top: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 0;\r\n    padding-left: 24px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst Hero = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledHero>\r\n      <StyledContainer>\r\n        <LeftWrapper>\r\n          <Title>{TranslateString(708, 'The CAKE Lottery')}</Title>\r\n          <Blurb>{TranslateString(710, 'Buy tickets with CAKE')}</Blurb>\r\n          <Blurb>{TranslateString(712, 'Win if 2, 3, or 4 of your ticket numbers match!')}</Blurb>\r\n        </LeftWrapper>\r\n        <RightWrapper>\r\n          <LotteryProgress />\r\n        </RightWrapper>\r\n      </StyledContainer>\r\n    </StyledHero>\r\n  )\r\n}\r\n\r\nexport default Hero\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport PastLotteryDataContext from 'contexts/PastLotteryDataContext'\r\nimport { getLotteryIssueIndex } from 'utils/lotteryUtils'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useLottery } from 'hooks/useContract'\r\nimport Page from 'components/layout/Page'\r\nimport Hero from './components/Hero'\r\nimport Divider from './components/Divider'\r\nimport NextDrawPage from './NextDrawPage'\r\nimport PastDrawsPage from './PastDrawsPage'\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst Lottery: React.FC = () => {\r\n  const lotteryContract = useLottery()\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const [activeIndex, setActiveIndex] = useState(0)\r\n  const [historyData, setHistoryData] = useState([])\r\n  const [historyError, setHistoryError] = useState(false)\r\n  const [currentLotteryNumber, setCurrentLotteryNumber] = useState(0)\r\n  const [mostRecentLotteryNumber, setMostRecentLotteryNumber] = useState(1)\r\n\r\n  useEffect(() => {\r\n    fetch(`https://api.pancakeswap.com/api/lotteryHistory`)\r\n      .then((response) => response.json())\r\n      .then((data) => setHistoryData(data))\r\n      .catch(() => {\r\n        setHistoryError(true)\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const getInitialLotteryIndex = async () => {\r\n      const index = await getLotteryIssueIndex(lotteryContract)\r\n      const previousLotteryNumber = index - 1\r\n\r\n      setCurrentLotteryNumber(index)\r\n      setMostRecentLotteryNumber(previousLotteryNumber)\r\n    }\r\n\r\n    if (account && lotteryContract) {\r\n      getInitialLotteryIndex()\r\n    }\r\n  }, [account, lotteryContract])\r\n\r\n  const handleClick = (index) => {\r\n    setActiveIndex(index)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Hero />\r\n      <Page>\r\n        <Wrapper>\r\n          <ButtonMenu activeIndex={activeIndex} onItemClick={handleClick} scale=\"sm\" variant=\"subtle\">\r\n            <ButtonMenuItem>{TranslateString(716, 'Next draw')}</ButtonMenuItem>\r\n            <ButtonMenuItem>{TranslateString(718, 'Past draws')}</ButtonMenuItem>\r\n          </ButtonMenu>\r\n        </Wrapper>\r\n        <Divider />\r\n        {/* <PastLotteryDataContext.Provider\r\n          value={{ historyError, historyData, mostRecentLotteryNumber, currentLotteryNumber }}\r\n        >\r\n          {activeIndex === 0 ? <NextDrawPage /> : <PastDrawsPage />}\r\n        </PastLotteryDataContext.Provider> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Lottery\r\n","/* eslint-disable no-await-in-loop */\r\nimport BigNumber from 'bignumber.js'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport ticketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport { LOTTERY_TICKET_PRICE } from 'config'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { getMulticallAddress } from './addressHelpers'\r\n\r\nexport const multiCall = async (abi, calls) => {\r\n  const web3 = getWeb3NoAccount()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  let res = []\r\n  if (calls.length > 100) {\r\n    let i = 0\r\n    while (i < calls.length / 100) {\r\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\r\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n      const { returnData } = await multi.methods.aggregate(calldata).call()\r\n      i++\r\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\r\n    }\r\n  } else {\r\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call()\r\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\r\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n  const ticketIssues = await multiCall(ticketAbi, calls2)\r\n\r\n  const finalTokenids = []\r\n  ticketIssues.forEach(async (ticketIssue, i) => {\r\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\r\n      finalTokenids.push(tokenIds[i])\r\n    }\r\n  })\r\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\r\n  const tickets = await multiCall(ticketAbi, calls3)\r\n\r\n  await getLotteryStatus(lotteryContract)\r\n  return tickets\r\n}\r\n\r\nexport const getTicketsAmount = async (ticketsContract, account) => {\r\n  return ticketsContract.methods.balanceOf(account).call()\r\n}\r\n\r\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\r\n  await lotteryContract.methods.issueIndex().call()\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n  const claimedStatus = await multiCall(ticketAbi, calls2)\r\n\r\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\r\n\r\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n  const rewards = await multiCall(lotteryAbi, calls3)\r\n\r\n  let finanltokenIds = []\r\n  rewards.forEach((r, i) => {\r\n    if (r > 0) {\r\n      finanltokenIds.push(unClaimedIds[i])\r\n    }\r\n  })\r\n\r\n  if (finanltokenIds.length > 200) {\r\n    finanltokenIds = finanltokenIds.slice(0, 200)\r\n  }\r\n\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiClaim(finanltokenIds)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\r\n  try {\r\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n    const length = await getTicketsAmount(ticketsContract, account)\r\n    // eslint-disable-next-line prefer-spread\r\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n      ticketsContract.options.address,\r\n      'tokenOfOwnerByIndex',\r\n      [account, i],\r\n    ])\r\n    const res = await multiCall(ticketAbi, calls1)\r\n    const tokenIds = res.map((id) => id.toString())\r\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n    const ticketIssues = await multiCall(ticketAbi, calls2)\r\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n    const claimedStatus = await multiCall(ticketAbi, calls3)\r\n\r\n    const drawed = await getLotteryStatus(lotteryContract)\r\n\r\n    const finalTokenids = []\r\n    ticketIssues.forEach(async (ticketIssue, i) => {\r\n      // eslint-disable-next-line no-empty\r\n      if (!drawed && ticketIssue.toString() === issueIndex) {\r\n      } else if (!claimedStatus[i][0]) {\r\n        finalTokenids.push(tokenIds[i])\r\n      }\r\n    })\r\n\r\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n\r\n    const rewards = await multiCall(lotteryAbi, calls4)\r\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), new BigNumber(0))\r\n\r\n    return claim\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return new BigNumber(0)\r\n}\r\n\r\nexport const getTotalRewards = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\r\n}\r\n\r\nexport const getMax = async (lotteryContract) => {\r\n  return lotteryContract.methods.maxNumber().call()\r\n}\r\n\r\nexport const getLotteryIssueIndex = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return issueIndex\r\n}\r\n\r\nexport const getLotteryStatus = async (lotteryContract) => {\r\n  return lotteryContract.methods.drawed().call()\r\n}\r\n\r\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\r\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n  if (!drawed) {\r\n    issueIndex -= 1\r\n  }\r\n  try {\r\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\r\n    return amount / 1e18 / LOTTERY_TICKET_PRICE\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getWinningNumbers = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const numbers = []\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n\r\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\r\n    return [0, 0, 0, 0]\r\n  }\r\n  if (!drawed) {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\r\n    }\r\n  }\r\n  return numbers\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLottery } from 'hooks/useContract'\r\nimport { getLotteryStatus } from 'utils/lotteryUtils'\r\n\r\n/**\r\n * Returns whether or not the current lottery has drawn numbers\r\n *\r\n * @return {Boolean}\r\n */\r\nconst useGetLotteryHasDrawn = () => {\r\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract) {\r\n      const fetchLotteryStatus = async () => {\r\n        const state = await getLotteryStatus(lotteryContract)\r\n        setLotteryHasDrawn(state)\r\n      }\r\n\r\n      fetchLotteryStatus()\r\n    }\r\n  }, [account, lotteryContract])\r\n\r\n  return lotteryHasDrawn\r\n}\r\n\r\nexport default useGetLotteryHasDrawn\r\n","const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = seconds\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n"],"sourceRoot":""}