{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","hooks/useBuyLottery.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","views/Home/components/LotteryCard.tsx","hooks/useTickets.ts","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","utils/lotteryUtils.ts","hooks/useGetLotteryHasDrawn.ts","hooks/useAllowance.ts"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","earningsBusd","multipliedBy","usePriceCakeBusd","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","UnlockButton","StyledTokenInput","StyledSpacer","spacing","StyledTokenAdornmentWrapper","StyledMaxText","primary","StyledTokenSymbol","span","TicketInput","max","symbol","availableSymbol","onChange","onSelectMax","alignItems","placeholder","toLocaleString","BuyTicketModal","amount","onDismiss","val","setVal","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","parseInt","LOTTERY_TICKET_PRICE","onMultiBuy","lotteryContract","useLottery","numbers","multiBuy","txHash","useMultiBuyLottery","maxNumber","setMax","fetchMax","getMax","useMaxNumber","handleBuy","Array","apply","Math","floor","random","toString","console","error","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","title","e","currentTarget","Tips","num","Announce","Final","ModalActions","variant","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","TicketsList","WarningModal","StyledLotteryCard","useGetLotteryHasDrawn","setRequestedClaim","useLotteryAllowance","useModal","PurchaseWarningModal","onMultiClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","ticketsContract","useLotteryTicket","fetchBalance","getTotalClaim","claim","useTotalClaim","lotteryTicketContract","multiClaim","useMultiClaimLottery","tokenName","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard","LotteryCard","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","web3","useWeb3","contract","getBep20Contract","balanceOf","multiCall","abi","getWeb3NoAccount","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","i","newCalls","slice","calldata","toLowerCase","encodeFunctionData","aggregate","returnData","concat","decodeFunctionResult","price","numbersList","times","send","from","on","tx","transactionHash","getTickets","customLotteryNum","issueIndex","getTicketsAmount","calls1","options","ticketAbi","tokenIds","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","eq","push","calls3","tickets","getLotteryStatus","claimedStatus","unClaimedIds","lotteryAbi","rewards","finanltokenIds","r","drawed","calls4","p","c","sum","getTotalRewards","getLotteryIssueIndex","getMatchingRewardLength","matchNumber","historyAmount","getWinningNumbers","historyNumbers","winningNumbers","lotteryHasDrawn","setLotteryHasDrawn","state","fetchLotteryStatus","allowance","setAllowance","useCake","getLotteryAddress","fetchAllowance","useIfoAllowance","tokenContract","spenderAddress","dependency","fetch"],"mappings":"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","file":"static/js/8.47e7fd67.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n}\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      <CardBusdValue value={earningsBusd} />\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceCakeBusd()).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      <CardBusdValue value={busdBalance} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/squid-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/squid-small.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'Squid to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'Squid in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting Squid')\r\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Flex, Input, InputProps } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\n\r\ninterface TokenInputProps extends InputProps {\r\n  max: number | string\r\n  symbol: string\r\n  availableSymbol: string\r\n  value: string\r\n  onSelectMax?: () => void\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <StyledTokenInput>\r\n      <Flex alignItems=\"center\">\r\n        <Input onChange={onChange} placeholder=\"0\" value={value} />\r\n        <StyledTokenAdornmentWrapper>\r\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\r\n          <StyledSpacer />\r\n          <div>\r\n            <Button size=\"sm\" onClick={onSelectMax}>\r\n              {TranslateString(452, 'Max')}\r\n            </Button>\r\n          </div>\r\n        </StyledTokenAdornmentWrapper>\r\n      </Flex>\r\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\r\n    </StyledTokenInput>\r\n  )\r\n}\r\n\r\nconst StyledTokenInput = styled.div``\r\n\r\nconst StyledSpacer = styled.div`\r\n  width: ${(props) => props.theme.spacing[3]}px;\r\n`\r\n\r\nconst StyledTokenAdornmentWrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n`\r\n\r\nconst StyledMaxText = styled.div`\r\n  align-items: center;\r\n  color: ${(props) => props.theme.colors.primary};\r\n  display: flex;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  height: 44px;\r\n  justify-content: flex-end;\r\n`\r\n\r\nconst StyledTokenSymbol = styled.span`\r\n  color: ${(props) => props.theme.colors.primary};\r\n  font-weight: 700;\r\n`\r\n\r\nexport default TicketInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport TicketInput from 'components/TicketInput'\r\nimport ModalActions from 'components/ModalActions'\r\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\r\n\r\ninterface BuyTicketModalProps {\r\n  max: BigNumber\r\n  onConfirm?: (amount: string, numbers: Array<number>) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\r\n  const [val, setVal] = useState('1')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [, setRequestedBuy] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const maxTickets = useMemo(() => {\r\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\r\n  }, [max])\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\r\n\r\n  const { onMultiBuy } = useMultiBuyLottery()\r\n  const maxNumber = useMaxNumber()\r\n  const handleBuy = useCallback(async () => {\r\n    try {\r\n      setRequestedBuy(true)\r\n      const length = parseInt(val)\r\n      // @ts-ignore\r\n      // eslint-disable-next-line prefer-spread\r\n      const numbers = Array.apply(null, { length }).map(() => [\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n        Math.floor(Math.random() * maxNumber) + 1,\r\n      ])\r\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedBuy(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\r\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\r\n    } else {\r\n      setVal(maxTickets.toString())\r\n    }\r\n  }, [maxTickets])\r\n\r\n  const cakeCosts = (amount: string): number => {\r\n    return +amount * LOTTERY_TICKET_PRICE\r\n  }\r\n  return (\r\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\r\n      <TicketInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol=\"TICKET\"\r\n        availableSymbol=\"CAKE\"\r\n      />\r\n      <div>\r\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} CAKE`, { num: LOTTERY_TICKET_PRICE })}</Tips>\r\n      </div>\r\n      <div>\r\n        <Announce>\r\n          {TranslateString(\r\n            478,\r\n            'Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.',\r\n          )}\r\n        </Announce>\r\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} CAKE`)}</Final>\r\n      </div>\r\n      <ModalActions>\r\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          id=\"lottery-buy-complete\"\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx ||\r\n            parseInt(val) > Number(maxTickets) ||\r\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\r\n            parseInt(val) < 1\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await handleBuy()\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default BuyTicketModal\r\n\r\nconst Tips = styled.div`\r\n  margin-left: 0.4em;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nconst Final = styled.div`\r\n  margin-top: 1em;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\nconst Announce = styled.div`\r\n  margin-top: 1em;\r\n  margin-left: 0.4em;\r\n  color: #ed4b9e;\r\n`\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\r\n\r\nexport const useMultiClaimLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n  const lotteryTicketContract = useLotteryTicket()\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\r\n      return txHash\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, lotteryContract, lotteryTicketContract])\r\n\r\n  return { onMultiClaim: handleClaim }\r\n}\r\n\r\nexport const useMultiBuyLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleBuy = useCallback(\r\n    async (amount: string, numbers: Array<any>) => {\r\n      try {\r\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\r\n        return txHash\r\n      } catch (e) {\r\n        return false\r\n      }\r\n    },\r\n    [account, lotteryContract],\r\n  )\r\n\r\n  return { onMultiBuy: handleBuy }\r\n}\r\n\r\nexport const useMaxNumber = () => {\r\n  const [max, setMax] = useState(5)\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchMax = useCallback(async () => {\r\n    const maxNumber = await getMax(lotteryContract)\r\n    setMax(maxNumber)\r\n  }, [lotteryContract])\r\n\r\n  useEffect(() => {\r\n    if (lotteryContract) {\r\n      fetchMax()\r\n    }\r\n  }, [lotteryContract, fetchMax])\r\n\r\n  return max\r\n}\r\n","import { useCallback, useState } from 'react'\r\nimport { useLotteryApprove } from './useApprove'\r\n\r\nexport const useApproval = (onPresentApprove: () => void) => {\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { onApprove } = useLotteryApprove()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      const txHash = await onApprove()\r\n      // user rejected tx or didn't go thru\r\n      if (!txHash) {\r\n        setRequestedApproval(false)\r\n      }\r\n      onPresentApprove()\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, onPresentApprove])\r\n\r\n  return { handleApprove, requestedApproval }\r\n}\r\n\r\nexport default useApproval\r\n","import React from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport styled from 'styled-components'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\r\n      <TicketsList>\r\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\r\n        <br />\r\n        {TranslateString(470, 'Your CAKE will not be returned to you after you spend it to buy tickets.')}\r\n        <br />\r\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\r\n        <br />\r\n        {TranslateString(\r\n          474,\r\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\r\n        )}\r\n      </TicketsList>\r\n      <ModalActions>\r\n        <Button width=\"100%\" onClick={onDismiss}>\r\n          {TranslateString(476, 'I understand')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nconst TicketsList = styled.div`\r\n  text-align: left;\r\n  overflow-y: auto;\r\n  max-height: 400px;\r\n  color: ${(props) => props.theme.colors.primary};\r\n`\r\n\r\nexport default WarningModal\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\r\nimport { useLotteryAllowance } from 'hooks/useAllowance'\r\nimport { useApproval } from 'hooks/useApproval'\r\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\r\nimport CakeWinnings from './CakeWinnings'\r\nimport LotteryJackpot from './LotteryJackpot'\r\n\r\nconst StyledLotteryCard = styled(Card)`\r\n  //background-image: url('/images/ticket-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  margin-top: 24px;\r\n  button {\r\n    flex: 1 0 50%;\r\n  }\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\r\n  const [requesteClaim, setRequestedClaim] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const allowance = useLotteryAllowance()\r\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\r\n  const { claimAmount } = useTotalClaim()\r\n  const { onMultiClaim } = useMultiClaimLottery()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      setRequestedClaim(true)\r\n      const txHash = await onMultiClaim()\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedClaim(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiClaim, setRequestedClaim])\r\n\r\n  const renderLotteryTicketButtonBuyOrApprove = () => {\r\n    if (!allowance.toNumber()) {\r\n      return (\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n          {TranslateString(494, 'Approve CAKE')}\r\n        </Button>\r\n      )\r\n    }\r\n    return (\r\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\r\n        {TranslateString(558, 'Buy Tickets')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"CAKE\" />)\r\n\r\n  return (\r\n    <StyledLotteryCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(550, 'Announcments')}\r\n        </Heading>\r\n        {/* <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(552, 'CAKE to Collect')}:</Label>\r\n          <CakeWinnings />\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(554, 'Total jackpot this round')}:</Label>\r\n          <LotteryJackpot />\r\n        </Block>\r\n        <Actions>\r\n          <Button\r\n            id=\"dashboard-collect-winnings\"\r\n            disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\r\n            onClick={handleClaim}\r\n            style={{ marginRight: '8px' }}\r\n          >\r\n            {TranslateString(556, 'Collect Winnings')}\r\n          </Button>\r\n          {renderLotteryTicketButtonBuyOrApprove()}\r\n        </Actions> */}\r\n      </CardBody>\r\n    </StyledLotteryCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import { useCallback, useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\r\nimport useRefresh from './useRefresh'\r\nimport {\r\n  getTotalRewards,\r\n  getTotalClaim,\r\n  getMatchingRewardLength,\r\n  getWinningNumbers,\r\n  getTickets,\r\n} from '../utils/lotteryUtils'\r\n\r\nconst useTickets = (lotteryNumber = null) => {\r\n  const [tickets, setTickets] = useState([])\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\r\n      setTickets(res)\r\n    }\r\n\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\r\n\r\n  return tickets\r\n}\r\n\r\nexport const useTotalRewards = () => {\r\n  const [rewards, setRewards] = useState(new BigNumber(0))\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTotalRewards(lotteryContract)\r\n      setRewards(new BigNumber(res))\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, fastRefresh])\r\n\r\n  return rewards\r\n}\r\n\r\nexport const useTotalClaim = () => {\r\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\r\n  const [claimLoading, setClaimLoading] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const ticketsContract = useLotteryTicket()\r\n  const lotteryContract = useLottery()\r\n\r\n  const fetchBalance = useCallback(async () => {\r\n    setClaimLoading(true)\r\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\r\n    setClaimAmount(claim)\r\n    setClaimLoading(false)\r\n  }, [account, lotteryContract, ticketsContract])\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract && ticketsContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\r\n\r\n  return { claimLoading, claimAmount }\r\n}\r\n\r\nexport const useWinningNumbers = () => {\r\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const rewards = await getWinningNumbers(lotteryContract)\r\n      setWinningNumbers(rewards)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\r\n\r\n  return winngNumbers\r\n}\r\n\r\nexport const useMatchingRewardLength = (numbers) => {\r\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\r\n  const lotteryContract = useLottery()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\r\n      setMatchingNumbers(matchedNumbaers)\r\n    }\r\n\r\n    if (lotteryContract) {\r\n      fetchBalance()\r\n    }\r\n  }, [lotteryContract, numbers, fastRefresh])\r\n\r\n  return matchingNumbers\r\n}\r\n\r\nexport default useTickets\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'Squid Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Squid Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Squid Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New Squid Block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={5} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useTotalValue } from '../../../state/hooks'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  // const data = useGetStats()\r\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n  const totalValue = useTotalValue()\r\n\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(762, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {/* {data ? ( */}\r\n          {/* <> */}\r\n            {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\r\n          <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2} />\r\n\r\n            {/* <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Pudding Pools')}</Text> */}\r\n          {/* </> */}\r\n        {/* ) : ( */}\r\n          {/* <>\r\n            <Skeleton height={66} />\r\n          </> */}\r\n        {/* )} */}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n // background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n  //  background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"#fff\">\r\n          {TranslateString(576, 'SquidSwap')}\r\n        </Heading>\r\n        <Text style={{color:'#fff'}}>{TranslateString(578, 'The Friendliest AMM on Binance')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <LotteryCard />\r\n        </Cards>\r\n        {/* <CTACards>\r\n          <EarnAPYCard />\r\n          <EarnAssetCard />\r\n          <WinCard />\r\n        </CTACards> */}\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","/* eslint-disable no-await-in-loop */\r\nimport BigNumber from 'bignumber.js'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3NoAccount } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport ticketAbi from 'config/abi/lotteryNft.json'\r\nimport lotteryAbi from 'config/abi/lottery.json'\r\nimport { LOTTERY_TICKET_PRICE } from 'config'\r\nimport { AbiItem } from 'web3-utils'\r\nimport { getMulticallAddress } from './addressHelpers'\r\n\r\nexport const multiCall = async (abi, calls) => {\r\n  const web3 = getWeb3NoAccount()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n  let res = []\r\n  if (calls.length > 100) {\r\n    let i = 0\r\n    while (i < calls.length / 100) {\r\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\r\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n      const { returnData } = await multi.methods.aggregate(calldata).call()\r\n      i++\r\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\r\n    }\r\n  } else {\r\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\r\n    const { returnData } = await multi.methods.aggregate(calldata).call()\r\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\r\n  }\r\n  return res\r\n}\r\n\r\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\r\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n  const ticketIssues = await multiCall(ticketAbi, calls2)\r\n\r\n  const finalTokenids = []\r\n  ticketIssues.forEach(async (ticketIssue, i) => {\r\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\r\n      finalTokenids.push(tokenIds[i])\r\n    }\r\n  })\r\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\r\n  const tickets = await multiCall(ticketAbi, calls3)\r\n\r\n  await getLotteryStatus(lotteryContract)\r\n  return tickets\r\n}\r\n\r\nexport const getTicketsAmount = async (ticketsContract, account) => {\r\n  return ticketsContract.methods.balanceOf(account).call()\r\n}\r\n\r\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\r\n  await lotteryContract.methods.issueIndex().call()\r\n  const length = await getTicketsAmount(ticketsContract, account)\r\n  // eslint-disable-next-line prefer-spread\r\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n    ticketsContract.options.address,\r\n    'tokenOfOwnerByIndex',\r\n    [account, i],\r\n  ])\r\n  const res = await multiCall(ticketAbi, calls1)\r\n  const tokenIds = res.map((id) => id.toString())\r\n\r\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n  const claimedStatus = await multiCall(ticketAbi, calls2)\r\n\r\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\r\n\r\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n  const rewards = await multiCall(lotteryAbi, calls3)\r\n\r\n  let finanltokenIds = []\r\n  rewards.forEach((r, i) => {\r\n    if (r > 0) {\r\n      finanltokenIds.push(unClaimedIds[i])\r\n    }\r\n  })\r\n\r\n  if (finanltokenIds.length > 200) {\r\n    finanltokenIds = finanltokenIds.slice(0, 200)\r\n  }\r\n\r\n  try {\r\n    return lotteryContract.methods\r\n      .multiClaim(finanltokenIds)\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        return tx.transactionHash\r\n      })\r\n  } catch (err) {\r\n    return console.error(err)\r\n  }\r\n}\r\n\r\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\r\n  try {\r\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n    const length = await getTicketsAmount(ticketsContract, account)\r\n    // eslint-disable-next-line prefer-spread\r\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\r\n      ticketsContract.options.address,\r\n      'tokenOfOwnerByIndex',\r\n      [account, i],\r\n    ])\r\n    const res = await multiCall(ticketAbi, calls1)\r\n    const tokenIds = res.map((id) => id.toString())\r\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\r\n    const ticketIssues = await multiCall(ticketAbi, calls2)\r\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\r\n    const claimedStatus = await multiCall(ticketAbi, calls3)\r\n\r\n    const drawed = await getLotteryStatus(lotteryContract)\r\n\r\n    const finalTokenids = []\r\n    ticketIssues.forEach(async (ticketIssue, i) => {\r\n      // eslint-disable-next-line no-empty\r\n      if (!drawed && ticketIssue.toString() === issueIndex) {\r\n      } else if (!claimedStatus[i][0]) {\r\n        finalTokenids.push(tokenIds[i])\r\n      }\r\n    })\r\n\r\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\r\n\r\n    const rewards = await multiCall(lotteryAbi, calls4)\r\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), new BigNumber(0))\r\n\r\n    return claim\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return new BigNumber(0)\r\n}\r\n\r\nexport const getTotalRewards = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\r\n}\r\n\r\nexport const getMax = async (lotteryContract) => {\r\n  return lotteryContract.methods.maxNumber().call()\r\n}\r\n\r\nexport const getLotteryIssueIndex = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  return issueIndex\r\n}\r\n\r\nexport const getLotteryStatus = async (lotteryContract) => {\r\n  return lotteryContract.methods.drawed().call()\r\n}\r\n\r\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\r\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n  if (!drawed) {\r\n    issueIndex -= 1\r\n  }\r\n  try {\r\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\r\n    return amount / 1e18 / LOTTERY_TICKET_PRICE\r\n  } catch (err) {\r\n    console.error(err)\r\n  }\r\n  return 0\r\n}\r\n\r\nexport const getWinningNumbers = async (lotteryContract) => {\r\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\r\n  const numbers = []\r\n  const drawed = await lotteryContract.methods.drawed().call()\r\n\r\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\r\n    return [0, 0, 0, 0]\r\n  }\r\n  if (!drawed) {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 4; i++) {\r\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\r\n    }\r\n  }\r\n  return numbers\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useLottery } from 'hooks/useContract'\r\nimport { getLotteryStatus } from 'utils/lotteryUtils'\r\n\r\n/**\r\n * Returns whether or not the current lottery has drawn numbers\r\n *\r\n * @return {Boolean}\r\n */\r\nconst useGetLotteryHasDrawn = () => {\r\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\r\n  const { account } = useWeb3React()\r\n  const lotteryContract = useLottery()\r\n\r\n  useEffect(() => {\r\n    if (account && lotteryContract) {\r\n      const fetchLotteryStatus = async () => {\r\n        const state = await getLotteryStatus(lotteryContract)\r\n        setLotteryHasDrawn(state)\r\n      }\r\n\r\n      fetchLotteryStatus()\r\n    }\r\n  }, [account, lotteryContract])\r\n\r\n  return lotteryHasDrawn\r\n}\r\n\r\nexport default useGetLotteryHasDrawn\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { getLotteryAddress } from 'utils/addressHelpers'\r\nimport { useCake } from './useContract'\r\nimport useRefresh from './useRefresh'\r\n\r\n// Retrieve lottery allowance\r\nexport const useLotteryAllowance = () => {\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n  const { account } = useWeb3React()\r\n  const cakeContract = useCake()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllowance = async () => {\r\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\r\n      setAllowance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllowance()\r\n    }\r\n  }, [account, cakeContract, fastRefresh])\r\n\r\n  return allowance\r\n}\r\n\r\n// Retrieve IFO allowance\r\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\r\n  const { account } = useWeb3React()\r\n  const [allowance, setAllowance] = useState(new BigNumber(0))\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      try {\r\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\r\n        setAllowance(new BigNumber(res))\r\n      } catch (e) {\r\n        console.error(e)\r\n      }\r\n    }\r\n    fetch()\r\n  }, [account, spenderAddress, tokenContract, dependency])\r\n\r\n  return allowance\r\n}\r\n"],"sourceRoot":""}